
[
  
  
  {
    "objectID": "1740268800",
    "permalink": "//localhost:1313/post/blogtest/",
    "title": "Blogtest",
    
    "content": "###Intro\n",
    
    "date": "2025-02-23 00:00:00",
    "updated": "2025-02-23 00:00:00"
  }
  
  , 
  {
    "objectID": "1740268800",
    "permalink": "//localhost:1313/post/git/",
    "title": "Git",
    
    "content": "\rGit\rtest\rwhat should i do with this?\nI\u0026rsquo;ll explain Git workflow in simple terms, like you\u0026rsquo;re five! 🌟\n1. Your Local Repository (Like Your Toy Box) 📦\rThink of your local repository (C:\\Users\\nneko\\muondingu) as your toy box. It has three main areas:\nWorking Directory: Where you play with your toys (make changes to files) Staging Area: Where you put toys you want to keep (staged changes) Local Repository: Your toy box where you store toys properly (committed changes) 2. Remote Repository (Like a Shared Toy Box at School) 🏫\rGitHub is like a shared toy box at school You can put your toys there (push) Get new toys from there (pull) Share toys with friends (collaborate) Basic Workflow Commands 🎮\rCheck what toys are out (changed files): git status Put toys in the staging area (stage changes): git add filename # Stage specific file git add . # Stage all changes Store toys in your toy box (commit): git commit -m \u0026#34;I added new toys\u0026#34; Share toys with school (push to GitHub): git push origin master Get new toys from school (pull from GitHub): git pull origin master Let\u0026rsquo;s practice this workflow with your repository:\ngit status Let\u0026rsquo;s check what\u0026rsquo;s in your themes folder since we saw changes there earlier:\nls themes Now, let me explain how to manage your repository step by step:\nDaily Workflow 📅\rBefore Starting Work git pull origin master # Get latest changes from GitHub While Working git status # Check what you changed git add . # Stage your changes git commit -m \u0026#34;Message\u0026#34; # Save your changes with a note When Finished git push origin master # Share your changes on GitHub Special Cases 🎯\rIf you want to undo changes before staging: git restore filename # Undo changes in a file If you want to undo staged changes: git restore --staged filename # Unstage changes If you want to see your change history: git log # See all your saves (commits) For Your Current Situation 🎯\rYou have theme folders that have been modified. You have two options:\nTrack theme changes directly: git add themes/ git commit -m \u0026#34;Update theme customizations\u0026#34; git push origin master Use themes as submodules (more advanced): This is like having a toy box inside your main toy box. It\u0026rsquo;s more complex but better for theme management. Which approach would you prefer? The simple direct tracking or the more advanced submodule approach? I can guide you through either one! 😊\nbranches\rAh, perfect! Let me explain Git branches using the game save analogy! 🎮\nBranches = Game Save Files! 🎮\rThink of Git like your favorite video game with multiple save slots:\nmain/master: Your main story save file feature branches: Alternate save files where you try different quests stash: Quick save before trying something risky Basic Save Commands 🎮\rCheck Your Save Files git branch # Shows all your local save files git branch -a # Shows ALL save files (including online backups) Create New Save File git checkout -b new-quest # Like choosing an empty save slot Switch Between Saves git checkout quest-name # Like loading a different save file Save File Management 🎯\rMaking a New Save (Creating a branch) git checkout -b side-quest-1 # \u0026#34;New Game+\u0026#34; from your main save Saving Your Progress (Committing) git add . # Mark what to save git commit -m \u0026#34;Beat the boss!\u0026#34; # Save with a note Uploading Save Files (Pushing) git push origin side-quest-1 # Upload your save to the cloud Common Save Scenarios 🌟\rStarting a New Quest git checkout main # Load main save git checkout -b new-feature # Create new save slot # Try new stuff without fear! Merging Quest Rewards (Merging branches) git checkout main # Go back to main save git merge new-feature # Add cool stuff from side quest Emergency Save (Stashing) git stash # Quick save current progress git stash pop # Load quick save Save File Types 📁\rMain Story Save (main/master) Your stable, working game Where everything is tested and works The save file you\u0026rsquo;d show your friends Side Quest Saves (feature branches) Try new weapons/skills Test different strategies If they work, add them to main save Quick Fix Saves (hotfix branches) When something breaks in main save Quick repairs without starting over Merge back to main immediately Pro Gamer Tips 🏆\rAlways Save Before Big Fights git checkout -b risky-feature # New save before trying something crazy Keep Save Files Organized feature/new-weapon # New weapon testing bugfix/broken-shield # Fixing broken equipment test/boss-strategy # Trying new boss strategies Cloud Saves (Remote repositories) git push origin your-save # Upload to cloud git pull origin your-save # Download from cloud Save File Safety 🛡️\rProtect Your Main Save Never experiment directly on main Always make a new save file for tests Review changes before merging Regular Backups git checkout your-save git pull origin main # Update with latest main save Clean Up Old Saves git branch -d old-save # Delete completed quest saves Remember: Branches are like free save slots in your favorite game! They let you:\nTry crazy strategies Test new features Keep your main save safe Team up with other players Want to learn more about any of these game save techniques? 🎮\n",
    
    "date": "2025-02-23 00:00:00",
    "updated": "2025-02-23 00:00:00"
  }
  
  , 
  {
    "objectID": "1740182400",
    "permalink": "//localhost:1313/post/learn-html--css-correctly---ilovecoding/",
    "title": "Learn HTML \u0026 CSS Correctly - iLoveCoding",
    
    "content": "\r🛠️ =this.file.mday 🗒️ =this.file.name\r😇 Important: This course is FREE and always will be 🙌. Feel free to share it with friends. 🎁\nHTML Cheatsheet\rDownload HTML Cheatsheet (PDF) Star HTML Cheatsheet on Github Share HTML/CSS Cheatsheet Link: https://ilovecoding.org/blog/htmlcss-cheatsheet CSS Cheatsheet\rDownload CSS Cheatsheet (PDF) Star CSS Cheatsheet on Github Share HTML/CSS Cheatsheet Link: https://ilovecoding.org/blog/htmlcss-cheatsheet What is HTML?\rHTML abbreviation for Hyper Text Markup Language, is a Markup Language to put together the structure of a web page. Think of HTML as the skeleton of a webpage. There is no website or webpage on the internet that does not use HTML. Without HTML, the web would not be possible.\nWhat HTML is not\rHTML is not a programming language. Please don\u0026amp;rsquo;t confuse the two concepts. A programming language has logical and computational capability to instruct a computer to do some operations. A markup language, on the other hand, is static and is …",
    
    "date": "2025-02-22 00:00:00",
    "updated": "2025-02-22 00:00:00"
  }
  
  , 
  {
    "objectID": "1740140251",
    "permalink": "//localhost:1313/post/anonymous/",
    "title": "Anonymous and Safe Content Publishing",
    
    "content": " Key Points for Anonymous and Safe Content Publishing\rUse pseudonyms, anonymous emails (e.g., ProtonMail), VPNs (e.g., ExpressVPN), Tor browser, and remove metadata for technical anonymity. Choose platforms like self-hosted WordPress for better privacy; social media is riskier due to data collection. Write neutrally, avoid personal details, and assess content risks. Secure accounts with strong passwords, private browsing, and separate online/offline identities. Legally, avoid defamation and hate speech; use anonymity responsibly. Technical Measures\rTo publish anonymously, start with technical tools:\nPseudonyms: Use a fake name, ensuring no link to your real identity. Anonymous Emails: Sign up with services like ProtonMail or Tutanota, avoiding personal info. VPNs: Mask your IP with providers like ExpressVPN or NordVPN, choosing no-log policies. Tor Browser: Use for strong anonymity, though slower; download from Tor Project. Metadata Removal: Strip data from files using tools like …",
    
    "date": "2025-02-21 19:17:31",
    "updated": "2025-02-21 19:17:31"
  }
  
  , 
  {
    "objectID": "1740140251",
    "permalink": "//localhost:1313/post/readme/",
    "title": "readme",
    
    "content": " hexo-theme-reimu 💘 Hakurei Reimu 💘 Demo\n简体中文 | English\nWarning\rVersions below v1.0.0 have been deprecated. Please upgrade to version v1.0.0 or above as soon as possible.\nA Hakurei Reimu style Hexo theme.\nA combination of landscape、Tangyuxian and Shoka themes.\nframework repository version stars Hexo hexo-theme-reimu Astro astro-theme-reimu Hugo hugo-theme-reimu ISSUE and PR Welcome!\nFeatures\rBasic Functions\r✨ Full blog functionality 🔄 Compatible with Hexo6+ 📱 Responsive layout 🌙 Dark mode support 🅰️ i18n support Code \u0026amp;amp; Math\r🖥️ Code highlighting and copying ➗ KaTeX / MathJax3 math formula support 📊 Mermaid flowchart support Search \u0026amp;amp; Comments\r🔍 Algolia search integration 🔍 Local search integration 💬 Multiple comment systems support: Valine Waline Twikoo Gitalk Giscus Statistics \u0026amp;amp; Analytics\r📊 Article reading statistics (Valine / Waline) 👥 Visitor statistics (Busuanzi) Media \u0026amp;amp; Interactive Features\r🎵 Music player support: Aplayer Meting 🖼️ Lazy loading for images ⚡ Loading …",
    
    "date": "2025-02-21 19:17:31",
    "updated": "2025-02-21 19:17:31"
  }
  
  , 
  {
    "objectID": "1731715200",
    "permalink": "//localhost:1313/post/d1---foundational-large-language-models--text-generation/",
    "title": "D1",
    
    "content": "\rContents\rWhy language models are important\r[!PDF|yellow] [[Barektain et al_Foundational Large Language Models \u0026amp;amp; Text Generation.pdf#page=7\u0026amp;amp;selection=20,15,30,29\u0026amp;amp;color=yellow|Barektain et al_Foundational Large Language Models \u0026amp;amp; Text Generation, p.7]]\nAlthough foundational LLMs trained in a variety of tasks on large amounts of data perform very well out of the box and display emergent behaviors (e.g. the ability to perform tasks they have not been directly trained for) they can also be adapted to solve specific tasks where performance out of the box is not at the level desired through a process known as fine-tuning. This requires significantly less data and computational resources than training an LLM from scratch.\nThe big question is: how do these large language models work? The next section explores the core building blocks of LLMs,\nfocusing on transformer architectures and their evolution from the original ‘Attention is all you need’ to the latest models such as …",
    
    "date": "2024-11-16 00:00:00",
    "updated": "2024-11-16 00:00:00"
  }
  
  , 
  {
    "objectID": "1552262400",
    "permalink": "//localhost:1313/post/markdown-syntax/",
    "title": "Markdown Syntax Guide",
    
    "content": "This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings\rThe following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1\rH2\rH3\rH4\rH5\rH6\rParagraph\rXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes\rThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution\rTiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution\rDon\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables\rTables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables\rItalics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks\rCode block with backticks\r\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces\r\u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block with Hugo\u0026rsquo;s internal highlight shortcode\r\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block\r[dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types\rOrdered List\rFirst item Second item Third item Unordered List\rList item Another item And another item Nested list\rFruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark\rGIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image\rThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n",
    
    "date": "2019-03-11 00:00:00",
    "updated": "2019-03-11 00:00:00"
  }
  
  , 
  {
    "objectID": "1552089600",
    "permalink": "//localhost:1313/post/placeholder-text/",
    "title": "Placeholder Text",
    
    "content": "Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt\rThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat\rVicta caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n",
    
    "date": "2019-03-09 00:00:00",
    "updated": "2019-03-09 00:00:00"
  }
  
  , 
  {
    "objectID": "1552003200",
    "permalink": "//localhost:1313/post/math-typesetting/",
    "title": "Math Typesetting",
    
    "content": "Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples\rInline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n",
    
    "date": "2019-03-08 00:00:00",
    "updated": "2019-03-08 00:00:00"
  }
  
  , 
  {
    "objectID": "1551744000",
    "permalink": "//localhost:1313/post/emoji-support/",
    "title": "Emoji Support",
    
    "content": "\rtest\ryoutube.com\rEmoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }",
    
    "date": "2019-03-05 00:00:00",
    "updated": "2019-03-05 00:00:00"
  }
  
]